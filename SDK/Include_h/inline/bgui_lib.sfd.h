#ifndef INLINE_BGUI_LIB_SFD_H
#define INLINE_BGUI_LIB_SFD_H

/*
** GCC format inline files.
**
** Copyright 2025 amigazen project
** Copyright 1998 Manuel Lemos
** Copyright 1996-1997 Ian J. Einman
** Copyright 1993-1996 Jaba Development
** Copyright 1993-1996 Jan van den Baard
** All Rights Reserved
**
** Generated by LibDescConverter from an sfd file
*/

/* "bgui.library" */
/*--- functions in V40811 or higher --- */
#define BGUI_GetClassPtr()    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register ULONG p0 __asm("d0") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-30:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_NewObjectA(, )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register ULONG p0 __asm("d0") = ();   \
	register struct TagItem *p1 __asm("a0") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-36:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_RequestA(, , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct Window *p0 __asm("a0") = ();   \
	register struct Requester *p1 __asm("a1") = ();   \
	register APTR p2 __asm("a2") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-42:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_Help(, , , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct Window *p0 __asm("a0") = ();   \
	register STRPTR p1 __asm("a1") = ();   \
	register STRPTR p2 __asm("a2") = ();   \
	register ULONG p3 __asm("d0") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-48:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_LockWindow()    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct Window *p0 __asm("a0") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-54:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_UnlockWindow()    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register APTR p0 __asm("a0") = ();   \
	__asm volatile ("jsr a6@(-60:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define BGUI_DoGadgetMethodA(, , , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct Gadget *p0 __asm("a0") = ();   \
	register struct Window *p1 __asm("a1") = ();   \
	register struct Requester *p2 __asm("a2") = ();   \
	register struct IntuiMessage *p3 __asm("a3") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-66:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_AllocBitMap(, , , , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register ULONG p0 __asm("d0") = ();   \
	register ULONG p1 __asm("d1") = ();   \
	register ULONG p2 __asm("d2") = ();   \
	register ULONG p3 __asm("d3") = ();   \
	register struct BitMap *p4 __asm("a0") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-84:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_FreeBitMap()    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct BitMap *p0 __asm("a0") = ();   \
	__asm volatile ("jsr a6@(-90:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define BGUI_CreateRPortBitMap(, , , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct RastPort *p0 __asm("a0") = ();   \
	register ULONG p1 __asm("d0") = ();   \
	register ULONG p2 __asm("d1") = ();   \
	register ULONG p3 __asm("d2") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-96:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_FreeRPortBitMap()    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct RastPort *p0 __asm("a0") = ();   \
	__asm volatile ("jsr a6@(-102:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define BGUI_InfoTextSize(, , , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct RastPort *p0 __asm("a0") = ();   \
	register STRPTR p1 __asm("a1") = ();   \
	register ULONG *p2 __asm("a2") = ();   \
	register ULONG *p3 __asm("a3") = ();   \
	__asm volatile ("jsr a6@(-108:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define BGUI_InfoText(, , , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct RastPort *p0 __asm("a0") = ();   \
	register STRPTR p1 __asm("a1") = ();   \
	register struct IBox *p2 __asm("a2") = ();   \
	register struct DrawInfo *p3 __asm("a3") = ();   \
	__asm volatile ("jsr a6@(-114:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define BGUI_GetLocaleStr(, )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct Catalog *p0 __asm("a0") = ();   \
	register ULONG p1 __asm("d0") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-120:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_GetCatalogStr(, , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct Catalog *p0 __asm("a0") = ();   \
	register ULONG p1 __asm("d0") = ();   \
	register STRPTR p2 __asm("a1") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-126:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_FillRectPattern(, , , , , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct RastPort *p0 __asm("a1") = ();   \
	register struct BitMap *p1 __asm("a0") = ();   \
	register ULONG p2 __asm("d0") = ();   \
	register ULONG p3 __asm("d1") = ();   \
	register ULONG p4 __asm("d2") = ();   \
	register ULONG p5 __asm("d3") = ();   \
	__asm volatile ("jsr a6@(-132:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4), "r"(p5) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define BGUI_PostRender(, , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct Class *p0 __asm("a0") = ();   \
	register struct Gadget *p1 __asm("a2") = ();   \
	register struct GP *p2 __asm("a1") = ();   \
	__asm volatile ("jsr a6@(-138:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define BGUI_MakeClassA()    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct TagItem *p0 __asm("a0") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-144:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_FreeClass()    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register struct Class *p0 __asm("a0") = ();   \
	__asm volatile ("jsr a6@(-150:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define BGUI_PackStructureTags(, , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register APTR p0 __asm("a0") = ();   \
	register struct TagItem *p1 __asm("a1") = ();   \
	register struct TagItem *p2 __asm("a2") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-156:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define BGUI_UnpackStructureTags(, , )    \
({  \
	register void *b __asm("a6") = BGUIBase;  \
	register APTR p0 __asm("a0") = ();   \
	register struct TagItem *p1 __asm("a1") = ();   \
	register struct TagItem *p2 __asm("a2") = ();   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-162:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})


#endif /* INLINE_BGUI_LIB_SFD_H */
